---
aliases:
  puppet: "sudo /opt/puppetlabs/bin/puppet"

functions:
  find_puppet_class:
    - find -iname "*.eyaml" -exec sh -c "CLASS=$1 "'RES=$(yq ".classes[] | select(. == \"${CLASS}\")" < {} 2>/dev/null); test ! -z $RES && echo {}' \;
  fix_agent:
    - MY_DIR=$(ls -ldt /tmp/ssh-* | grep jdratlif | head -1 | awk '{print $NF}')
    - MY_AGENT=$(ls ${MY_DIR}/agent*)
    - export SSH_AUTH_SOCK=$MY_AGENT
  p:
    - >-
      if [[ -z "$1" ]]; then action="run"; else action=$1; shift; fi
    - >-
      puppet="sudo /opt/puppetlabs/bin/puppet"
    - >-
      ignore_lock="--agent_disabled_lockfile=/nonexisting"
    - >-
      log="tee $HOME/puppet.log"
    - >-
      if [[ $action = "env" ]]; then grep environment /etc/puppetlabs/puppet/puppet.conf | awk "{print \$3}"
    - >-
      elif [[ $action = "enabled" ]]; then
    - >2-
        msg=$(sudo cat /opt/puppetlabs/puppet/cache/state/agent_disabled.lock 2>/dev/null)
    - >2-
        if [[ -z $msg ]]; then echo "puppet is enabled"
    - >2-
        else echo "puppet is disabled: $(echo $msg | jq .disabled_message)"
    - >2-
        fi
    - >-
      elif [[ $action = "run" ]]; then my_cmd="$puppet agent --test "$@" 2>&1 | $log"; echo "$my_cmd"; eval $my_cmd
    - >-
      elif [[ $action = "test" ]]; then my_cmd="$puppet agent --test $ignore_lock --noop "$@" 2>&1 | $log"; echo "$my_cmd"; eval $my_cmd
    - >-
      elif [[ $action = "force" ]]; then my_cmd="$puppet agent --test $ignore_lock "$@" 2>&1 | $log" ; echo "$my_cmd"; eval $my_cmd
    - >-
      elif [[ $action = "lookup" ]]; then my_cmd="$puppet lookup --merge deep --node "$@""; echo "$my_cmd"; eval $my_cmd
    - >-
      elif [[ $action = "disable" ]]; then
    - >2-
        if [[ -z "$1" ]]; then msg="testing"; else msg=$1; fi
    - >2-
        my_cmd="$puppet agent --disable \"$(date '+%Y-%m-%d') $(whoami) - $msg\""; echo "$my_cmd"; eval $my_cmd
    - >-
      elif [[ $action = "enable" ]]; then my_cmd="$puppet agent --enable"; echo "$my_cmd"; eval $my_cmd
    - >-
      else echo "unrecognized action ${action}"
    - >-
      fi
  perl_libs:
    - >-
      MY_LIBS=$(grep '^use' $1 | tr -d '\n')
    - >-
      perl -M'Data::Dump qw(pp)' -e "${MY_LIBS} pp(\%INC);"

gitconfig:
  name: John Ratliff
  email: jdratlif@globalnoc.iu.edu
  credentials:
    - name: https://github.grnoc.iu.edu
      username: jdratlif
      helper: cache --timeout 14400
    - name: https://github.nwave.noaa.gov
      username: jdratlif
      helper: cache --timeout 14400
